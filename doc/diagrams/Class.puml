@startuml

package GoldenPhenix #DDDDDD
{
    Castle <-- Room
    Castle <-- Player
    Castle <-- Bat
    Castle <-- Rat
    Castle <.. Exception

    Door <.. Object

    ItemStack <-- Object

    Room <-- Door
    Room <.. Object
    Room <.. Exception
    Room <-- Vector2

    Trader <-- Player
    Trader <.. Object

    Player #-- Entity
    Player <-- ItemStack
    Player <-- Room
    Player <.. Object

    Bat #-- Entity

    Rat #-- Entity

    Entity <-- Vector2

    class Castle
    {
        - rooms : vector< Room* >
        - thereIsABat : bool
        - bat : Bat*
        - player : Player*
        - score : int
        - ringIsInInventory : bool
        - iteration : int
        - attacked : bool
        - lastRoomID : unsigned int
        - isPlayerTorchLit : bool
        - shouldReset : bool
        - movedToNextRoom : bool
        - failedToOpenDoor : bool
        - exitCastle : bool
        - usingCustomTimer : bool

        + Update()
        + ProcessActions( IN string )
        + GetScore() : int
        + SetScore( IN int )
        + GetPlayer() : Player*
        + GetBat() : Bat*
        + GetRooms() : vector< Room* >
        + FailedToOpenDoor() : bool
        + SaveRooms( IN string )
        + LoadRooms( IN string )
        + LoadCastle()
        + AddIteration( IN unsigned int )
        + ShouldReset() : bool
        + ExitCastle() : bool
        + EnterCastle()
        + GetRat() : Rat*
        + KillPlayer()
        + GetRingIsInInventory() : bool
        - PickUp()
        - Use()
        - OpenDoor( IN Door*, IN JoiningDirections ) : bool
        - MoveToLeftRoom()
        - MoveToRightRoom()
        - MoveToUpperRoom()
        - PlacePlayer( IN Room* )
        - OpenChest( IN JoiningDirections ) : bool
        - BatInRoom( OUT Vector2< int > ) : bool
        - SpawnBat()
        - MoveBat()
        - RatInRoom( OUT Vector2< int > ) : bool
        - SpawnRat()
        - MoveRat()
        - RemoveALife()
        - FindRoomID( IN unsigned int ) : unsigned int
        - Random( IN float, IN float ) : float
    }

    class Room
    {
        - id : unsigned int
        - isCorridor : bool
        - ground : int [ ROOM_HEIGHT ][ ROOM_WIDTH ]
        - joiningRooms : unsigned int [ JoiningDiretions::TOTAL ]
        - joiningDoors : Door* [ JoiningDirections::TOTAL ]
        - {static} oblivionLinks : map< int, int >

        + GetRoomID() : unsigned int
        + GetRoomID( IN JoiningDirections ) : unsigned int
        + GetDoor( IN JoiningDirections ) : Door*
        + IsCorridor() : bool
        + GetSquare( IN Vector2 ) : int
        + ToString() : string
        + {static} GetOblivionLink( IN int ) : int
        + {static} GetOblivionOrigin( IN int ) : int
        + Save() : queue< string >
        - LoadID( IN-OUT queue< string > )
        - LoadJoiningData( IN-OUT queue< string > )
        - LoadGround( IN-OUT queue< string > )
    }

    class Player < extends Entity >
    {
        - currentRoom : Room*
        - items : vector< ItemStack >
        - heldItem : int
        - money : int
        - grounded : bool
        - crouched : bool
        - jumping : bool
        - deaths : unsigned int
        - isTorchLit : bool

        + ProcessActions( IN string )
        + Update()
        + AddItem( IN Object )
        + RemoveItem( IN Object )
        + GetHeldItem() : ItemStack&
        + SetHeldItem( IN int )
        + HasObject( IN Object ) : bool
        + GetObjectPositionFromInventory( IN Object ) : int
        + Crouched() : bool
        + Grounded() : bool
        + SetGrounded( IN bool )
        + TorchLit() : bool
        + GetCurrentRoom() : Room*
        + SetCurrentRoom( Room* room )
        + GetMoney() : int
        + SetMoney( IN int )
        + AddMoney( IN int )
        + EmptyInventory()
        + Kill()
        + GetDeaths() : unsigned int
        + Save( IN string )
        + Load( IN string ) : int
        - ActivateTorch()
    }

    class Bat < extends Entity >
    {
        - active : bool

        + Attack( IN Entity* )
        + Activate()
        + Deactivate()
        + GetActiveState() : bool
    }

    class Rat < extends Entity >
    {
        - active : bool

        + Attack( IN Entity* )
        + Activate()
        + Deactivate()
        + GetActiveState() : bool
    }

    class Door
    {
        - door : DOORS
        - requires : OPEN_TYPES
        - hasTorch : bool
        - torchLit : bool
        - objectID : int

        + GetDoorType() : DOORS
        + SetDoorType( IN DOORS )
        + GetOpenType() : OPEN_TYPES
        + SetOpenType( IN OPEN_TYPES )
        + SetTorchState()
        + GetTorchState() : bool
        + HasTorch() : bool
        + AddObject( IN int )
        + RemoveObject( IN int )
        + GetObject() : int
        + Save() : string
    }

    class ItemStack
    {
        - object : Object*
        - stack : int
        - durability : int

        + Add( IN unsigned int ) : int
        + Remove( IN unsigned int )
        + Use( IN unsigned int )
        + GetAmount() : int
        + GetObject() : Object
        + GetDurability() : int
    }

    class Object
    {
        + id : int
        + maxStackSize : int
        + durability : int
        + name : string

        + ToString() : string
        + GetID() : ObjectID
        + {static} ToObject( IN int ) : Object
    }

    class Entity
    {
        - life : int
        - position : Vector2
        - direction : Vector2

        + GetLife() : int
        + SetLife( IN int )
        + AddLife( IN int )
        + GetPosition() : Vector2
        + SetPosition( IN Vector2 )
        + Translate( IN Vector2 )
        + GetDirection() : Vector2
        + SetDirection( IN Vector2 )
        + Update()
    }

    class Exception< extends std::runtime_error >
    {
        - message : string
        - file : string
        - line : unsigned int

        + what() : char*
        + whatFile() : char*
        + whatLine() : unsigned int
    }

    class Vector2< T >
    {
        + x : T
        + y : T

        + MagnitudeSq() : T
        + Magnitude() : T
        + Normalize()
        + Normalized() : Vector2
        + Direction() : T
        + ToString() : string
    }

    class Trader
    {
        - player : Player*
        - price_Crowbar : int
        - price_GrapplingHook : int
        - price_Torch : int
        - price_LifePotion : int

        + Purchase( IN ObjectID ) : bool
        + GetPrice( IN ObjectID ) : int
    }
}

package "GoldenPhenix_SDL2" #DDAADD
{
    Graphics <.. Exception

    GameManager <-- ScreensManager
    GameManager <-- Graphics
    GameManager <-- Timer
    GameManager <-- AudioManager
    GameManager <-- InputsManager

    InputsManager <-- Vector2

    MainScreen <-- Castle
    MainScreen #-- Texture
    MainScreen <-- AnimatedTexture
    MainScreen <-- InputsManager
    MainScreen <-- Room
    MainScreen <-- Door

    ShopScreen #-- Texture
    ShopScreen <-- Castle

    StartScreen #-- Texture
    StartScreen <-- Castle
    StartScreen <-- InputsManager

    EndScreen #-- GameEntity
    EndScreen <-- Castle
    EndScreen <-- AnimatedTexture
    EndScreen <-- InputsManager
    EndScreen <-- AudioManager

    IntroScreen #-- GameEntity
    IntroScreen <-- AnimatedTexture
    IntroScreen <-- InputsManager
    IntroScreen <-- AudioManager

    InventoryScreen #-- GameEntity
    InventoryScreen <-- Castle
    InventoryScreen <-- InputsManager
    InventoryScreen <-- Texture
    InventoryScreen <-- Translation

    PauseScreen #-- GameEntity
    PauseScreen <-- Texture
    PauseScreen <-- Translation

    ScreensManager <-- MainScreen
    ScreensManager <-- ShopScreen
    ScreensManager <-- StartScreen
    ScreensManager <-- EndScreen
    ScreensManager <-- InventoryScreen
    ScreensManager <-- IntroScreen
    ScreensManager <-- AudioManager
    ScreensManager <-- Castle

    AnimatedTexture <-- Timer
    AnimatedTexture #-- Texture

    Texture #-- GameEntity
    Texture <-- Graphics

    GameEntity <-- Vector2


    class Graphics<< (S, #FF7700) >>
    {
        + {static} SCREEN_WIDTH : int
        + {static} SCREEN_HEIGHT : int
        - {static} instance : Graphics*
        - window : SDL_Window*
        - renderer : SDL_Renderer*

        + {static} GetInstance() : Graphics*
        + {static} Quit()
        + Clear()
        + Render()
        + LoadTexture( IN string ) : SDL_Texture*
        + CreateTextTexture( IN TTF_Font*, IN string, IN SDL_Color ) : SDL_Texture*
        + DrawTexture( IN SDL_Texture*, IN SDL_Rect*, IN SDL_Rect*, IN float, IN SDL_RendererFlip )
        + SetBackgroundColor( IN unsigned char, IN unsigned char, IN unsigned char )
        - Init()
    }

    class GameManager
    {
        - graphicsMgr : Graphics*
        - event : SDL_Event
        - quit : bool
        - timer : Timer*
        - FPS : int
        - audio : AudioManager*
        - inputs : InputsManager*
        - screens : ScreensManager*
        - assets : AssetsManager*

        + Run()
        - InitObjects()
        - DeleteObjects()
        - ProcessEvents()
        - EarlyUpdate()
        - Update()
        - LateUpdate()
        - Render()
    }

    Implementation <.. Exception

    class Implementation
    {
        + studioSystem : FMOD::Studio::System*
        + system : FMOD::System*
        + sounds : map< string, FMOD::Sound* >
        + channel : map< string, FMOD::Channel* >
        + nextChannelID : int
        + events : map< string, FMOD::Studio::EventInstance* >
        + banks : map< string, FMOD::Studio::Bank* >

        + Update()
        + {static} ErrorCheck( IN FMOD_RESULT )
    }

    AudioManager <-- Implementation

    class AudioManager<< (S, #FF7700) >>
    {
        - {static} implementation : Implementation*
        - {static} instance : AudioManager*

        + {static} GetInstance() : AudioManager*
        + {static} Shutdown()
        + Update()
        + LoadBank( IN string, IN FMOD_STUDIO_LOAD_BANK_FLAGS )
        + LoadSound( IN string, IN bool, IN bool, IN bool )
        + PlaySound( IN string, IN Vector3, IN float ) : int
        + UnloadSound( IN string )
        + LoadEvent( IN string )
        + PlayEvent( IN string )
        + StopEvent( IN string, IN bool )
        + GetEventParameter( IN string, IN string, OUT float )
        + SetEventParameter( IN string, IN string, IN float )
        + StopAllChannels()
        + StopChannel( IN int )
        + SetChannel3DPosition( IN int, IN Vector3 )
        + SetChannelVolume( IN int, IN float )
        + IsPlaying( IN string )
        + dBToVolume( IN float ) : float
        + VolumeTodB( IN float ) : float
        + Vector3ToFmod( IN Vector3 ) : FMOD_VECTOR
    }

    class Timer<< (S, #FF7700) >>
    {
        - {static} instance : Timer*
        - startTicks : unsigned int
        - elapsedTicks : unsigned int
        - deltaTime : float
        - timeScale : float

        + {static} GetInstance() : Timer*
        + {static} Stop()
        + Reset()
        + Update()
        + GetDeltaTime() : float
        + GetElapsedTicks() : unsigned int
        + GetTimeScale() : float
        + SetTimeScale( IN float )
    }

    class MainScreen< extends GameEntity >
    {
        - castle : Castle*
        - inputs : InputsManager*
        - All textures to be rendered : Texture*
        - All animated texture to be rendered : AnimatedTexture*

        + ProcessEvents( IN SDL_Event* )
        + Update()
        + Render()
        + SetTranslation( IN Translation* )
        - CastleToScreen( IN Texture*, IN int, IN int )
        - CastleToScreenTranslation( IN int, IN int, IN int, IN int, IN float, IN float )
        - LinearInterp( IN float, IN float, IN float )
        - AnimationPlayer()
        - AnimationBat()
        - TextDoor()
    }

    class EndScreen< extends GameEntity >
    {
        - castle : Castle*
        - inputs : InputsManager*
        - temps : int
        - quit : bool
        - text : Texture*
        - stepAnimFirst : int
        - text1, text2, text3, text4 : string
        - {static} NBTEXTINSCREEN : int
        - textscroll : Texture* [NBTEXTINSCREEN]
        - {static} MAXSCROLL : int
        - textScroll : string[MAXSCROLL]
        - stepScroll : int
        - animCredit : bool

        + ProcessEvents( IN SDL_Event* )
        + Update()
        + Render()
        + GetQuit() : bool
    }

    class IntroScreen< extends GameEntity >
    {
        - inputs : InputsManager*
        - FPS : int
        - temps : int
        - quitPossible : bool
        - text1, text2, text3, textQuit : Texture*
        - nbCaractereRead1, nbCaractereRead2, nbCaractereRead3 : int
        - caractereRead1, caractereRead2, caractereRead3 : string
        - text1, text2, text3 : string
        + ProcessEvents( IN SDL_Event* )
        + Update()
        + Render()
        + GetQuitPossible() : bool
    }

    class ScreensManager
    {
        - castle : Castle*
        - startScreen : StartScreen*
        - mainScreen : MainScreen*
        - currentScreen : SCREENS
        - audio : AudioManager*
        - backgroundMusic : FMOD::Sound*
        - inputs : InputsManager*

        + ProcessEvents( IN SDL_Event* )
        + Update()
        + Render()
        - SwitchCurrentScreen( IN SDL_Event* )
        - StartCurrentScreen()
    }

    ShopScreen <-- Trader
    class ShopScreen< extends GameEntity >
    {
        - castle : Castle*
        - translation : Translation*
        - trader : Trader*
        - inputs : InputsManager*
        - crowbar, grapplingHook, torch, lifePotion : Texture*
        - price_Crowbar, price_GrapplingHook, price_Torch, price_LifePotion : Texture*
        - money : Texture*

        + ProcessEvents( IN SDL_Event* )
        + Update()
        + Render()
        + SetTranslation( IN Translation* )
    }

    class PauseScreen < extends GameEntity >
    {
        - text, textLang, textSound : string
        - translation : Translation*
        - translationChanged : bool

        + SetTranslation( IN Translation* )
        + ProcessEvents( IN SDL_Event* )
        + Update()
        + Render()
    }

    class StartScreen< extends Texture >
    {
        - castle : Castle*
        - inputs : InputsManager*
        - startText : Texture*
        - shopText : Texture*

        + ProcessEvents( IN SDL_Event* )
        + Update()
        + Render()
    }

    class InventoryScreen< extends GameEntity >
    {
        - castle : Castle*
        - inputs : InputsManager*
        - translation : Translation*
        - textures, names, numbers, descriptions : map< ObjectID, Texture* >
        - selected : ObjectID
        - score, money, selector : Texture*
        - offset : int
        - WIDTH : int
        - coordinates : Vector2i [ObjectID::TOTAL - 1 ]

        + SetTranslation( IN Translation* )
        + ProcessEvents( IN SDL_Event* )
        + Update()
        + Render()
        - ResetColors()
        - ActivateItems()
        - SelectItem()
        - UpdateNumbers( IN ItemStack )
        - UpdateLanguage()
    }

    class AnimatedTexture < extends Texture >
    {
        - timer : Timer*
        - startX : int
        - startY : int
        - animationDirection : ANIMATION_DIRECTIONS
        - wrap : WRAP_MODE
        - frameCount : int
        - animationSpeed : float
        - timePerFrame : float
        - animationDone : bool
        - animationTimer : float

        + SetWrapMode( IN WRAP_MODE )
        + Update()
        + ResetAnimation()
        + GetAnimationDone()
    }

    class GameEntity < extends Entity >
    {
        - position : Vector2
        - rotation : float
        - scale : Vector2
        - active : bool

        + SetPosition( IN Vector2 )
        + GetPosition() : Vector2
        + Translate( IN Vector2 )
        + SetRotation( IN float )
        + GetRotation() : float
        + Rotate( IN float )
        + SetScale( IN Vector2 )
        + GetScale() : Vector2
        + SetActive( IN bool )
        + GetActive() : bool
        + Update()
    }

    class Texture < extends GameEntity >
    {
        # texture : SDL_Texture*
        # width : int
        # height : int
        # fullscreen : bool
        # destination : SDL_Rect
        # clip : SDL_Rect
        # clipped : bool

        + GetWidth() : int
        + GetHeight() : int
        + SetAlpha( IN unsigned char )
        + SetBlendingMode( IN SDL_BlendMode )
        + Update()
        + Render()
        + Render( IN SDL_RendererFlip )
    }

    class InputsManager<< (S, #FF7700) >>
    {
        - {static} instance : InputsManager*
        - keyboardState : Uint8*
        - previousKeyboardState : Uint8*
        - keyboardLength : int
        - mouseState : Uint32
        - previousMouseState : Uint32
        - mousePositionX : int
        - mousePositionY : int

        + {static} GetInstance() : InputsManager*
        + {static} Release()
        + KeyDown( IN SDL_Scancode ) : bool
        + KeyPressed( IN SDL_Scancode ) : bool
        + KeyReleased( IN SDL_Scancode ) : bool
        + MouseButtonDown( IN SDL_Scancode ) : bool
        + MouseButtonPressed( IN SDL_Scancode ) : bool
        + MouseButtonReleased( IN SDL_Scancode ) : bool
        + GetMousePosition() : Vector2
        + Update()
        + UpdatePreviousInput()
        - GetMask( IN MOUSE_BUTTON ) : Uint32
    }

    Translation <.. Exception
    class Translation
    {
        - nameFileFr, nameFileEn : string
        - fileFr, fileEn, fileKl, file : ifstream*
        - defaultLanguage : char

        + GetCurrentLanguage() : char
        + SetCurrentLanguage( IN char )
        + SearchWord( IN string, IN char ) : int
        + GetTranslation( IN int ) : string
    }
}

@enduml
